53. Maximum Subarray
Easy

3320

119

Favorite

Share
Given an integer array nums, find the contiguous subarray (containing at least one number) which has the largest sum and return its sum.

Example:

Input: [-2,1,-3,4,-1,2,1,-5,4],
Output: 6
Explanation: [4,-1,2,1] has the largest sum = 6.
Follow up:

If you have figured out the O(n) solution, try coding another solution using the divide and conquer approach, which is more subtle.

class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        
        head = 0
        n = len(nums)
        end = 0
        
        sum_new = nums[0]
        sum_old = nums[0]
        sum_max = nums[0]
        
        if(n == 1):
            return nums[0]
        else:
            for i in range(1, n):

                sum_old = sum_new

                sum_new = sum_old + nums[i]

                if nums[i] > nums[i-1]:
                    sum_temp = nums[i]
                    if sum_temp > sum_new:
                        sum_new = sum_temp

                if sum_max < sum_new:
                    sum_max = sum_new

            return sum_max

class Solution:
    def maxSubArray(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        for i in range(1, len(nums)):
            if nums[i-1] > 0:
                nums[i] += nums[i-1]
        return max(nums)
        
