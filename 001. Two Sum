Given an array of integers, return indices of the two numbers such that they add up to a specific target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

Example:

Given nums = [2, 7, 11, 15], target = 9,

Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].

class Solution:
    def twoSum(self, nums, target):
        rev_table = dict()
        for i in range(len(nums)):
        	second_addend = target - nums[i]
        	if second_addend in rev_table:
        		return [rev_table[second_addend], i]
        	else:
        		rev_table[nums[i]] = i
                

### a variant: find all the combinations

class Solution:
    def combinationSum(self, candidates, target):
        """
        :type candidates: List[int]
        :type target: int
        :rtype: List[List[int]]
        """
        
        rev = dict()
        
        col = []
        
        for i in range(len(candidates)):
            diff = target - candidates[i]
            if diff in rev:
                col.append([rev[diff], i])
            else:
                rev[candidates[i]] = i
        return col
                
